#include <stdio.h>
#include <stdlib.h>

#include "answer08.h"

SparseNode * SparseNode_create(int index, int value)
{
  SparseNode *node = malloc(sizeof(SparseNode));
  node->index = index;
  node->value = value;
  node->left = NULL;
  node->right = NULL;
  return node;
} 

SparseNode * SparseArray_insert(SparseNode * array, int index, int value)
{
  if (value == 0) return array;
  if (array == NULL) return SparseNode_create(index, value);
  if (array->index == index) {
    array->value = value;
  }
  else if (array->index > index) {
    array->left = SparseArray_insert(array->left, index, value);
  }
  else if (array->index < index) {
    array->right = SparseArray_insert(array->right, index, value);
  }
  return array;
}

SparseNode * SparseArray_build(int * indices, int * values, int length)
{
  if (length ==0) return NULL; 
  SparseNode * array = SparseNode_create(indices[0], values[0]);
  int i;
  for(i = 1; i < length; i++) {
    array = SparseArray_insert(array,indices[i],values[i]);
  }
  return array;
}

void SparseArray_destroy(SparseNode * array)
{
  if (array == NULL) return;
  SparseArray_destroy(array->left);
  SparseArray_destroy(array->right);
  free(array);
}

int SparseArray_getMin(SparseNode * array)
{
  if (!array) return 0;
  if (array->left)
    return SparseArray_getMin(array->left);
  return array->index;
}

int SparseArray_getMax(SparseNode * array)
{
  if (!array) return 0;
  if (array->right)
    return SparseArray_getMax(array->right);
  return array->index;
}

SparseNode * SparseArray_getNode(SparseNode * array, int index)
{
  if (array == NULL) return NULL;
  if (array->index == index) return array;
  if (array->index > index)
    return SparseArray_getNode(array->left, index);
  else
    return SparseArray_getNode(array->right, index);
}

SparseNode * SparseArray_remove(SparseNode * array, int index)
{
  if (array == NULL)
      return NULL;
  if ((array -> index) < index) {
    array -> right =  SparseArray_remove(array -> right, index);
    return array;
  }
  if ((array -> index) > index) {
    array -> left = SparseArray_remove(array -> left, index);
    return array;
  }
  
  if (((array -> left) == NULL) && ((array -> right) == NULL)) {
    free(array);
    return NULL;
  }
  if ((array -> left) == NULL) {
    SparseNode * sn = array -> right;
    free(array);
    return sn;
  }
  if ((array -> right) == NULL) {
    SparseNode * sn = array -> left;
    free(array);
    return sn;
  }
  
  SparseNode * p = array -> right;
  while ((p -> left) != NULL)
    {
      p = p -> left;
    }
  
  int t = p -> index;
  p -> index = array -> index
  array-> index = t;
  
  array -> right = SparseArray_remove(array-> right, index);
  return array;
}

SparseNode * SparseArray_copy(SparseNode * array)
{
  SparseNode * new = NULL;
  if (array) {
    new = malloc(sizeof(SparseNode));
    new->index = array->index;
    new->value = array->value;
    new->left = SparseArray_copy(array->left);
    new->right = SparseArray_copy(array->right);
  }
  return new;
}

SparseNode * SparseArray_merge(SparseNode * array_1, SparseNode * array_2)
{
  SparseNode * new_array = NULL;
  if (array_1 == NULL) return array_2;
  if (array_2 == NULL) return array_1;
  new_array = array_1;

  return new_array;
}
